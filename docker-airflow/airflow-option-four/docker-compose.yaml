x-airflow-common:
  &airflow-common
  image: apache/airflow:2.10.5
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_AIRFLOW_USER}:${POSTGRES_AIRFLOW_PASSWORD}@postgres-airflow:5432/airflow_meta
    PYTHONPATH: /opt/airflow
    POSTGRES_HOST: postgres-tradesmart
    POSTGRES_USER: ${POSTGRES_TRADESMART_USER}
    POSTGRES_PASSWORD: ${POSTGRES_TRADESMART_PASSWORD}
    POSTGRES_DB: tradesmart_db
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Asia/Seoul
    AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: Asia/Seoul
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  volumes:
    - ./DataPipeline/dags:/opt/airflow/dags
    - ./DataPipeline/logs:/opt/airflow/logs
    - ./DataPipeline/src:/opt/airflow/src
    - ./DataPipeline/data:/opt/airflow/data
    - ./DataPipeline/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  networks:
    - chartinsight-network

services:
  postgres-airflow:
    image: postgres:15
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: ${POSTGRES_AIRFLOW_USER}
      POSTGRES_PASSWORD: ${POSTGRES_AIRFLOW_PASSWORD}
      POSTGRES_DB: airflow_meta
    volumes:
      - postgres-airflow-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_AIRFLOW_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    profiles:
      - pipeline
    networks:
      - chartinsight-network

  postgres-tradesmart:
    image: postgres:15
    container_name: postgres-tradesmart
    environment:
      POSTGRES_USER: ${POSTGRES_TRADESMART_USER}
      POSTGRES_PASSWORD: ${POSTGRES_TRADESMART_PASSWORD}
      POSTGRES_DB: tradesmart_db
    volumes:
      - postgres-tradesmart-volume:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_TRADESMART_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - chartinsight-network

  # --- Airflow (pipeline) ---
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command:
      - bash
      - -c
      - |
        airflow db migrate &&
        python /opt/airflow/src/database.py &&
        airflow users create \
          --username $${_AIRFLOW_WWW_USER_USERNAME:-airflow} \
          --password $${_AIRFLOW_WWW_USER_PASSWORD:-airflow} \
          --firstname Airflow \
          --lastname Admin \
          --role Admin \
          --email admin@example.com
        echo "Creating Kiwoom API pool..." &&
        airflow pools set kiwoom_api_pool 1 "Kiwoom API single-slot pool"
    profiles:
      - pipeline
    depends_on:
      postgres-airflow:
        condition: service_healthy
      postgres-tradesmart:
        condition: service_healthy
    restart: "no"

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    profiles:
      - pipeline
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    profiles:
      - pipeline
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

networks:
  chartinsight-network:
    name: chartinsight-network
    driver: bridge

volumes:
  postgres-airflow-volume:
  postgres-tradesmart-volume: